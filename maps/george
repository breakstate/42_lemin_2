<><><><><><><>LEM-IN<><><><><><><><>
  
1) Parsing (seperate information and initialize everything)
2) All rooms added to linked list, then links are stored in linked list within room node
3) 

  4 3 2 1
  
  0 1 2 3
  | | | |
  1 2 3 0
  
     /---------[1]----[2] 
  [end]---[1]----[2]----[3]
  
  int room (0, 1 - start, 2 - end)
  
	_room 1___
	| id 1										|
  |	room 1									|
	| next room->2     				|
	| list of links = "3 4 5"	|
	| weight: -1 (4)          |
	|	populated 0             |
 
	_room 2___
	| id 3										|
	| next room->2     				|
	| list of links = "4"			|  
  
	_room 3___
	| id 3										|
	| next room->2     				|
	| list of links = "1 2"		|
 
	_room 4___
	| id 4										|
	| next room->5     				|
	| list of links-> = "2 5"	|

	_room 5___
	| id 5										|
  | room 2									|
	| next room -1	   				|
	| list of links = ""			|
    
23                 					 ---ants
##start                     {
1 23 3
2 16 7
#comment
3 16 3                      rooms
4 16 5
5 9 3
6 1 5
7 4 8
##end
0 9 5
0-4
0-6
1-3
4-3
5-2
3-5
#another comment             links
4-2
2-1
7-6
7-2
7-4
6-5                           

=================================================
void	ft_error(char *e)
{
    ft_putendl(e);
    exit;
}    
=================================================    
int			ants()
{
 	int		ant_num;
  char	*str = NULL;

  gnl(0, &str);
  while (str[0] != "#")//dont need trim, ft_isnum will catch
    gnl(0, &str);
	ant_num = ft_atoi(str);
	if (!ft_isnum(str))
  {
    free(str);
    close(fd);
  	ft_error("Invalid Map file\nDoesn't contain number of ants!");
  }
  if (ant_num <= 0)
  {
    free(str);
    close(fd);
    ft_error("Map doesn't have enough ants!");
  }
  free(str);
  return (ant_num);
}
==================================================    
int	main(int ac, char **av)
{
  t_node	*map = NULL;
  int			ant_num;

  ant_num = ants();
  readfile(map);
}
==================================================    
int	readfile(t_node *map)
{
  if (strcmp(gnl, "##start"))
  {
     if (gnl == node)
      addnode(map, node, 1);
  }
  else if (strcmp(gnl, "##end"))
  {
     if (gnl == node)
      addnode(map, node, 2);
  }
  else
     if (gnl == node)
      addnode(map, node, 0);  
}
===================================================    
int  addnode(t_node *map, char *id, int type)
{
    t_node s;

    initstruct(&s, id, type); //2 - end 1 - start 0 - normal
    return(appenedlist(map, &s));
}
===================================================    
typedef struct		s_node
{
    char					*id;  //"qwerty"
    int						start;
    int						normal;
    int						end;
    int						weight;
    int						pop; // populated
    struct s_node	*next;
}									t_node;
===================================================


=================================================================
/*
**	ft_isnumber()
**	receives string which is checked to be a valid number or not
**	trims string, checks each character to see if is_digit
**	1 if true, 0 if false
*/

int	ft_isnumber(char *num)
{
	char *trim_num;
	int	i;

	i = 0;
	trim_num = ft_strtrim(num);
	while (trim_num[i] && ft_isdigit(trim_num[i]))
	{
		i++;
	}
	if (trim_num[i] == '\0')
		return (1);
	return (0);
}
==================================================================
***reading from file test***
    
file:
hello george
this is...
just a test!

./a.exe < file

int     main(int ac, char **av)
{
  char    *s;

  s = NULL;
  get_next_line(0, &s);
  puts(s);
  get_next_line(0, &s);
  puts(s);
  get_next_line(0, &s);
  puts(s);
  return (0);
}
======================================================================
